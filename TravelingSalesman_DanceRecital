import java.util.*;
/**
 * https://open.kattis.com/contests/na16warmup1/problems/dancerecital
 * @author Ariana Herbst
 * October 1, 2016
 */
public class TravelingSalesman_DanceRecital {
	static ArrayList<String> routines;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		routines = new ArrayList<String>();
		int V = sc.nextInt();
		for (int i = 0; i < V; i++)
		{
			routines.add(sc.next());
		}
		TSP tsp = new TSP(V);
		int[] k = tsp.solve();
		
		int min = Integer.MAX_VALUE / 4;
		for (Integer i : k)
			min = Math.min(min, i);
		System.out.print(min);
	}
//The following code is taken from Virginia Tech ACM ICPC Handbook///////
	static class TSP
	{
		int n;
		TSP(int n) {this.n = n; }
		
		int dist(int from, int to)
		{
			if (from != to) //if different routines
			{
				String A = routines.get(from);
				String B = routines.get(to);
				//find number of shared dancers
				int shared = 0;
				for(int a = 0; a < A.length(); a++)
				{
					if (B.contains(A.charAt(a) + ""))
					{
						shared++;
					}
						
				}
				return shared;
			}
			return 0;
		}
		
		int initialdist(int to) {
			return 0;
		}
		
		int[] solve() {
			final int[][]D = new int[n][n];
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < n; j++)
				{
					D[j][i] = dist(j, i);
				}
			}
			int[][] dp = new int[1 << n] [n];
			for (int[] row : dp)
				Arrays.fill(row,  Integer.MAX_VALUE);
			
			for (int i = 0; i < n; i++)
				dp[1<<i][i] = initialdist(i);
			
			for (int mask = 0; mask < 1 << n; mask++)
				for (int i = 0; i < n; i++)
					if ((mask & 1 << i) > 0)
						for (int j = 0; j < n; j++)
							if (i != j && (mask & 1 << j) > 0)
								dp[mask][i] = Math.min(dp[mask][i], 
														dp[mask ^ (1<<i)][j] + D[j][i]);
			return dp[(1<<n)-1];
		}		
	}
}
